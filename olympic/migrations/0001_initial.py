# Generated by Django 4.1 on 2023-04-29 01:32

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Games',
            fields=[
                ('game_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('home_score', models.IntegerField(blank=True, null=True)),
                ('away_score', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Players',
            fields=[
                ('player_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('jersey', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Teams',
            fields=[
                ('team_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('flag_url', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TeamTourney',
            fields=[
                ('tt_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('gp', models.IntegerField(blank=True, null=True)),
                ('gf_gp', models.FloatField(blank=True, null=True)),
                ('ga_gp', models.FloatField(blank=True, null=True)),
                ('CF_gp', models.FloatField(blank=True, null=True)),
                ('CA_gp', models.FloatField(blank=True, null=True)),
                ('CF_percent', models.FloatField(blank=True, null=True)),
                ('shots_for_gp', models.FloatField(blank=True, null=True)),
                ('shots_against_gp', models.FloatField(blank=True, null=True)),
                ('shots_share_gp', models.FloatField(blank=True, null=True)),
                ('shooting_percent', models.FloatField(blank=True, null=True)),
                ('save_percentage', models.FloatField(blank=True, null=True)),
                ('PDO', models.FloatField(blank=True, null=True)),
                ('FF_gp', models.FloatField(blank=True, null=True)),
                ('FA_gp', models.FloatField(blank=True, null=True)),
                ('FF_percent', models.FloatField(blank=True, null=True)),
                ('cx_rate', models.FloatField(blank=True, null=True)),
                ('ux_rate', models.FloatField(blank=True, null=True)),
                ('fx_rate', models.FloatField(blank=True, null=True)),
                ('cx_gp', models.FloatField(blank=True, null=True)),
                ('ce_rate', models.FloatField(blank=True, null=True)),
                ('ue_rate', models.FloatField(blank=True, null=True)),
                ('fe_rate', models.FloatField(blank=True, null=True)),
                ('ce_gp', models.FloatField(blank=True, null=True)),
                ('ce_against_gp', models.FloatField(blank=True, null=True)),
                ('ce_against_rate', models.FloatField(blank=True, null=True)),
                ('zone_denial_rate', models.FloatField(blank=True, null=True)),
                ('fo_win_percent', models.FloatField(blank=True, null=True)),
                ('nzfo_win_percent', models.FloatField(blank=True, null=True)),
                ('dzfo_win_percent', models.FloatField(blank=True, null=True)),
                ('ozfo_win_percent', models.FloatField(blank=True, null=True)),
                ('fo_taken_gp', models.IntegerField(blank=True, null=True)),
                ('ozfo_shots_per_10_wins', models.FloatField(blank=True, null=True)),
                ('ozfo_cx_against_per_10_losses', models.FloatField(blank=True, null=True)),
                ('dzfo_shots_against_per_10_losses', models.FloatField(blank=True, null=True)),
                ('dzfo_cx_per_10_wins', models.FloatField(blank=True, null=True)),
                ('team_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teamtourney', to='olympic.teams')),
            ],
        ),
        migrations.CreateModel(
            name='TeamGame',
            fields=[
                ('tg_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('gf', models.FloatField(blank=True, null=True)),
                ('ga', models.FloatField(blank=True, null=True)),
                ('gf_percent', models.FloatField(blank=True, null=True)),
                ('CF', models.FloatField(blank=True, null=True)),
                ('CA', models.FloatField(blank=True, null=True)),
                ('CF_percent', models.FloatField(blank=True, null=True)),
                ('shots_for', models.FloatField(blank=True, null=True)),
                ('shots_against', models.FloatField(blank=True, null=True)),
                ('shots_share', models.FloatField(blank=True, null=True)),
                ('shooting_percent', models.FloatField(blank=True, null=True)),
                ('FF', models.FloatField(blank=True, null=True)),
                ('FA', models.FloatField(blank=True, null=True)),
                ('FF_percent', models.FloatField(blank=True, null=True)),
                ('cx_rate', models.FloatField(blank=True, null=True)),
                ('ux_rate', models.FloatField(blank=True, null=True)),
                ('fx_rate', models.FloatField(blank=True, null=True)),
                ('cx', models.FloatField(blank=True, null=True)),
                ('ce_rate', models.FloatField(blank=True, null=True)),
                ('ue_rate', models.FloatField(blank=True, null=True)),
                ('fe_rate', models.FloatField(blank=True, null=True)),
                ('ce', models.FloatField(blank=True, null=True)),
                ('ce_against', models.FloatField(blank=True, null=True)),
                ('ce_against_rate', models.FloatField(blank=True, null=True)),
                ('zone_denial_rate', models.FloatField(blank=True, null=True)),
                ('fo_win_percent', models.FloatField(blank=True, null=True)),
                ('nzfo_win_percent', models.FloatField(blank=True, null=True)),
                ('dzfo_win_percent', models.FloatField(blank=True, null=True)),
                ('ozfo_win_percent', models.FloatField(blank=True, null=True)),
                ('fo_taken', models.IntegerField(blank=True, null=True)),
                ('pass_completion', models.FloatField(blank=True, null=True)),
                ('puck_recoveries_won', models.FloatField(blank=True, null=True)),
                ('puck_recoveries_lost', models.FloatField(blank=True, null=True)),
                ('penalty_diff', models.FloatField(blank=True, null=True)),
                ('screened_shots', models.FloatField(blank=True, null=True)),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teamgame', to='olympic.games')),
                ('team_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teamgame', to='olympic.teams')),
            ],
        ),
        migrations.CreateModel(
            name='Takeaways',
            fields=[
                ('takeaway_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('period', models.IntegerField(blank=True, null=True)),
                ('periodtime', models.IntegerField(blank=True, null=True)),
                ('gametime', models.IntegerField(blank=True, null=True)),
                ('home_team_skaters', models.IntegerField(blank=True, null=True)),
                ('away_team_skaters', models.IntegerField(blank=True, null=True)),
                ('x_coord', models.IntegerField(blank=True, null=True)),
                ('y_coord', models.IntegerField(blank=True, null=True)),
                ('x_coord_adj', models.IntegerField(blank=True, null=True)),
                ('y_coord_adj', models.IntegerField(blank=True, null=True)),
                ('zone', models.CharField(blank=True, max_length=2, null=True)),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='takeaways', to='olympic.games')),
                ('player_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='takeaways', to='olympic.players')),
                ('team_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='takeaways', to='olympic.teams')),
            ],
        ),
        migrations.CreateModel(
            name='Shots',
            fields=[
                ('shot_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('period', models.IntegerField(blank=True, null=True)),
                ('periodtime', models.IntegerField(blank=True, null=True)),
                ('gametime', models.IntegerField(blank=True, null=True)),
                ('home_team_skaters', models.IntegerField(blank=True, null=True)),
                ('away_team_skaters', models.IntegerField(blank=True, null=True)),
                ('result', models.CharField(blank=True, max_length=10, null=True)),
                ('x_coord', models.IntegerField(blank=True, null=True)),
                ('y_coord', models.IntegerField(blank=True, null=True)),
                ('x_coord_adj', models.IntegerField(blank=True, null=True)),
                ('y_coord_adj', models.IntegerField(blank=True, null=True)),
                ('shot_type', models.CharField(blank=True, max_length=30, null=True)),
                ('destination', models.CharField(blank=True, max_length=30, null=True)),
                ('traffic', models.CharField(blank=True, max_length=30, null=True)),
                ('one_timer', models.CharField(blank=True, max_length=30, null=True)),
                ('a1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='a1', to='olympic.players')),
                ('a2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='a2', to='olympic.players')),
                ('a3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='a3', to='olympic.players')),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shots', to='olympic.games')),
                ('player_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shots', to='olympic.players')),
                ('team_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shots', to='olympic.teams')),
            ],
        ),
        migrations.CreateModel(
            name='Recoveries',
            fields=[
                ('recovery_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('period', models.IntegerField(blank=True, null=True)),
                ('periodtime', models.IntegerField(blank=True, null=True)),
                ('gametime', models.IntegerField(blank=True, null=True)),
                ('home_team_skaters', models.IntegerField(blank=True, null=True)),
                ('away_team_skaters', models.IntegerField(blank=True, null=True)),
                ('x_coord', models.IntegerField(blank=True, null=True)),
                ('y_coord', models.IntegerField(blank=True, null=True)),
                ('x_coord_adj', models.IntegerField(blank=True, null=True)),
                ('y_coord_adj', models.IntegerField(blank=True, null=True)),
                ('zone', models.CharField(blank=True, max_length=2, null=True)),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recoveries', to='olympic.games')),
                ('player_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recoveries', to='olympic.players')),
                ('team_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recoveries', to='olympic.teams')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerTourney',
            fields=[
                ('pt_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('gp', models.IntegerField(blank=True, null=True)),
                ('g_gp', models.FloatField(blank=True, null=True)),
                ('g_gp_percentile', models.FloatField(blank=True, null=True)),
                ('a_gp', models.FloatField(blank=True, null=True)),
                ('a_gp_percentile', models.FloatField(blank=True, null=True)),
                ('CF_gp', models.FloatField(blank=True, null=True)),
                ('CF_gp_percentile', models.FloatField(blank=True, null=True)),
                ('CA_gp', models.FloatField(blank=True, null=True)),
                ('CA_gp_percentile', models.FloatField(blank=True, null=True)),
                ('CF_percent', models.FloatField(blank=True, null=True)),
                ('CF_percent_percentile', models.FloatField(blank=True, null=True)),
                ('pass_completion', models.FloatField(blank=True, null=True)),
                ('pass_completion_percentile', models.FloatField(blank=True, null=True)),
                ('penalty_diff_gp', models.FloatField(blank=True, null=True)),
                ('penalty_diff_gp_percentile', models.FloatField(blank=True, null=True)),
                ('oz_takeaway_gp', models.FloatField(blank=True, null=True)),
                ('dz_takeaway_gp', models.FloatField(blank=True, null=True)),
                ('oz_recovery_gp', models.FloatField(blank=True, null=True)),
                ('dz_recovery_gp', models.FloatField(blank=True, null=True)),
                ('fo_win_percent', models.FloatField(blank=True, null=True)),
                ('fo_taken_gp', models.IntegerField(blank=True, null=True)),
                ('nzfo_win_percent', models.FloatField(blank=True, null=True)),
                ('dzfo_win_percent', models.FloatField(blank=True, null=True)),
                ('ozfo_win_percent', models.FloatField(blank=True, null=True)),
                ('cx_rate', models.FloatField(blank=True, null=True)),
                ('cx_rate_percentile', models.FloatField(blank=True, null=True)),
                ('ux_rate', models.FloatField(blank=True, null=True)),
                ('fx_rate', models.FloatField(blank=True, null=True)),
                ('cx_gp', models.FloatField(blank=True, null=True)),
                ('ce_rate', models.FloatField(blank=True, null=True)),
                ('ce_rate_percentile', models.FloatField(blank=True, null=True)),
                ('ue_rate', models.FloatField(blank=True, null=True)),
                ('fe_rate', models.FloatField(blank=True, null=True)),
                ('ce_gp', models.FloatField(blank=True, null=True)),
                ('shots_for_gp', models.FloatField(blank=True, null=True)),
                ('shots_against_gp', models.FloatField(blank=True, null=True)),
                ('shooting_percent', models.FloatField(blank=True, null=True)),
                ('shooting_percent_percentile', models.FloatField(blank=True, null=True)),
                ('player_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playertourney', to='olympic.players')),
                ('team_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playertourney', to='olympic.teams')),
            ],
        ),
        migrations.AddField(
            model_name='players',
            name='team_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='players', to='olympic.teams'),
        ),
        migrations.CreateModel(
            name='PlayerGame',
            fields=[
                ('pg_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('g', models.FloatField(blank=True, null=True)),
                ('a', models.FloatField(blank=True, null=True)),
                ('CF', models.FloatField(blank=True, null=True)),
                ('CA', models.FloatField(blank=True, null=True)),
                ('CF_percent', models.FloatField(blank=True, null=True)),
                ('pass_completion', models.FloatField(blank=True, null=True)),
                ('penalty_diff', models.FloatField(blank=True, null=True)),
                ('oz_takeaway', models.FloatField(blank=True, null=True)),
                ('dz_takeaway', models.FloatField(blank=True, null=True)),
                ('oz_recovery', models.FloatField(blank=True, null=True)),
                ('dz_recovery', models.FloatField(blank=True, null=True)),
                ('fo_win_percent', models.FloatField(blank=True, null=True)),
                ('nzfo_win_percent', models.FloatField(blank=True, null=True)),
                ('dzfo_win_percent', models.FloatField(blank=True, null=True)),
                ('ozfo_win_percent', models.FloatField(blank=True, null=True)),
                ('fo_taken', models.IntegerField(blank=True, null=True)),
                ('cx_rate', models.FloatField(blank=True, null=True)),
                ('ux_rate', models.FloatField(blank=True, null=True)),
                ('fx_rate', models.FloatField(blank=True, null=True)),
                ('cx', models.FloatField(blank=True, null=True)),
                ('ce_rate', models.FloatField(blank=True, null=True)),
                ('ue_rate', models.FloatField(blank=True, null=True)),
                ('fe_rate', models.FloatField(blank=True, null=True)),
                ('ce', models.FloatField(blank=True, null=True)),
                ('shots_for', models.FloatField(blank=True, null=True)),
                ('shots_against', models.FloatField(blank=True, null=True)),
                ('shooting_percent', models.FloatField(blank=True, null=True)),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playergame', to='olympic.games')),
                ('player_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playergame', to='olympic.players')),
                ('team_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='playergame', to='olympic.teams')),
            ],
        ),
        migrations.CreateModel(
            name='Passes',
            fields=[
                ('pass_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('period', models.IntegerField(blank=True, null=True)),
                ('periodtime', models.IntegerField(blank=True, null=True)),
                ('gametime', models.IntegerField(blank=True, null=True)),
                ('home_team_skaters', models.IntegerField(blank=True, null=True)),
                ('away_team_skaters', models.IntegerField(blank=True, null=True)),
                ('success', models.BooleanField(blank=True, null=True)),
                ('pass_type', models.CharField(blank=True, max_length=30, null=True)),
                ('passer_x_coord', models.IntegerField(blank=True, null=True)),
                ('passer_y_coord', models.IntegerField(blank=True, null=True)),
                ('passer_x_coord_adj', models.IntegerField(blank=True, null=True)),
                ('passer_y_coord_adj', models.IntegerField(blank=True, null=True)),
                ('passer_zone', models.CharField(blank=True, max_length=2, null=True)),
                ('receiver_x_coord', models.IntegerField(blank=True, null=True)),
                ('receiver_y_coord', models.IntegerField(blank=True, null=True)),
                ('receiver_x_coord_adj', models.IntegerField(blank=True, null=True)),
                ('receiver_y_coord_adj', models.IntegerField(blank=True, null=True)),
                ('receiver_zone', models.CharField(blank=True, max_length=2, null=True)),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='passes', to='olympic.games')),
                ('passer_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='passes', to='olympic.players')),
                ('receiver_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='passes_received', to='olympic.players')),
                ('team_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='passes', to='olympic.teams')),
            ],
        ),
        migrations.AddField(
            model_name='games',
            name='away_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='away_team', to='olympic.teams'),
        ),
        migrations.AddField(
            model_name='games',
            name='home_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='home_team', to='olympic.teams'),
        ),
        migrations.CreateModel(
            name='EE',
            fields=[
                ('ee_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('period', models.IntegerField(blank=True, null=True)),
                ('periodtime', models.IntegerField(blank=True, null=True)),
                ('gametime', models.IntegerField(blank=True, null=True)),
                ('home_team_skaters', models.IntegerField(blank=True, null=True)),
                ('away_team_skaters', models.IntegerField(blank=True, null=True)),
                ('type_ee', models.CharField(blank=True, max_length=30, null=True)),
                ('x_coord', models.IntegerField(blank=True, null=True)),
                ('y_coord', models.IntegerField(blank=True, null=True)),
                ('x_coord_adj', models.IntegerField(blank=True, null=True)),
                ('y_coord_adj', models.IntegerField(blank=True, null=True)),
                ('zone', models.CharField(blank=True, max_length=2, null=True)),
                ('defended_by_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ee_defended', to='olympic.players')),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ee', to='olympic.games')),
                ('player_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ee', to='olympic.players')),
                ('team_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ee', to='olympic.teams')),
            ],
        ),
        migrations.CreateModel(
            name='Penalties',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('penalty_id', models.IntegerField()),
                ('period', models.IntegerField(blank=True, null=True)),
                ('periodtime', models.IntegerField(blank=True, null=True)),
                ('gametime', models.IntegerField(blank=True, null=True)),
                ('home_team_skaters', models.IntegerField(blank=True, null=True)),
                ('away_team_skaters', models.IntegerField(blank=True, null=True)),
                ('taken', models.BooleanField(blank=True, null=True)),
                ('infraction_type', models.CharField(blank=True, max_length=50, null=True)),
                ('x_coord', models.IntegerField(blank=True, null=True)),
                ('y_coord', models.IntegerField(blank=True, null=True)),
                ('x_coord_adj', models.IntegerField(blank=True, null=True)),
                ('y_coord_adj', models.IntegerField(blank=True, null=True)),
                ('zone', models.CharField(blank=True, max_length=2, null=True)),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='penalties', to='olympic.games')),
                ('player_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='penalties', to='olympic.players')),
                ('team_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='penalties', to='olympic.teams')),
            ],
            options={
                'unique_together': {('penalty_id', 'team_id')},
            },
        ),
        migrations.CreateModel(
            name='Faceoffs',
            fields=[
                ('faceoff_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('period', models.IntegerField(blank=True, null=True)),
                ('periodtime', models.IntegerField(blank=True, null=True)),
                ('gametime', models.IntegerField(blank=True, null=True)),
                ('home_team_skaters', models.IntegerField(blank=True, null=True)),
                ('away_team_skaters', models.IntegerField(blank=True, null=True)),
                ('success', models.BooleanField(blank=True, null=True)),
                ('x_coord', models.IntegerField(blank=True, null=True)),
                ('y_coord', models.IntegerField(blank=True, null=True)),
                ('x_coord_adj', models.IntegerField(blank=True, null=True)),
                ('y_coord_adj', models.IntegerField(blank=True, null=True)),
                ('zone', models.CharField(blank=True, max_length=2, null=True)),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faceoffs', to='olympic.games')),
                ('player_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='faceoffs', to='olympic.players')),
                ('team_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='faceoffs', to='olympic.teams')),
            ],
            options={
                'unique_together': {('faceoff_id', 'team_id')},
            },
        ),
    ]
